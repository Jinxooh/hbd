{"version":3,"sources":["assets/title1.png","assets/happysong.mp3","assets/starwars.mp3","routes/About.tsx","components/Col.tsx","components/Row.tsx","components/WebCam.tsx","components/Music.tsx","components/Button.tsx","components/Starwars.tsx","routes/Camera.tsx","routes/Home.tsx","routes/Letter.tsx","containers/Header.tsx","containers/Menu.tsx","styles/theme.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","About","calcWidthPercent","span","Col","styled","div","xs","sm","md","lg","Row","WebCam","audio","forceScreenshotSourceSize","imageSmoothing","mirrored","screenshotFormat","screenshotQuality","minScreenshotHeight","minScreenshotWidth","onUserMedia","console","log","onUserMediaError","error","Music","url","auto","useState","Audio","playing","setPlaying","toggle","useEffect","play","pause","addEventListener","removeEventListener","useAudio","onClick","colorStyles","css","theme","color","selected","palette","lighten","StyledButton","button","Button","children","rest","StarwarsContainer","Section","section","CrawlKeyFrames","keyframes","Crawl","Starwars","Camera","happysong","require","Home","starwars","Letter","Header","props","fontColor","Image","img","HeaderContainer","src","title","MenuContainer","activeStyle","defaultStyle","textDecoration","menuList","path","name","Menu","map","item","to","exact","style","basicTheme","blue","gray","pink","basicWidth","backgroundColor","main","sub","AppContainer","App","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.882058e5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/title1.ce2597ac.png\";","module.exports = __webpack_public_path__ + \"static/media/happysong.13ba3b51.mp3\";","module.exports = __webpack_public_path__ + \"static/media/starwars.df8e2625.mp3\";","import React from \"react\";\n\nconst About = () => {\n  return <div>This is About page</div>;\n};\nexport default About;","import styled from 'styled-components';\n\n//Column 컴포넌트\nconst calcWidthPercent = (span: number) => {\n  if (!span) return;\n\n  const width = (span / 12) * 100;\n  return width;\n};\n\nconst BREAK_POINT_MOBILE = 768;\nconst BREAK_POINT_TABLET = 992;\nconst BREAK_POINT_PC = 1200;\n\ntype ColProps = {\n  xs: number;\n  sm: number;\n  md: number;\n  lg: number;\n}\n\nconst Col = styled.div`\n  float: left;\n  width: ${({ xs }: ColProps) => (xs ? `${calcWidthPercent(xs)}%` : `100%`)};\n  padding: 1rem;\n\n  @media only screen and (min-width: ${BREAK_POINT_MOBILE}px) {\n    width: ${({ sm }: ColProps) => sm && `${calcWidthPercent(sm)}%`};\n  }\n  @media only screen and (min-width: ${BREAK_POINT_TABLET}px) {\n    width: ${({ md }: ColProps) => md && `${calcWidthPercent(md)}%`};\n  }\n  @media only screen and (min-width: ${BREAK_POINT_PC}px) {\n    width: ${({ lg }: ColProps) => lg && `${calcWidthPercent(lg)}%`};\n  }\n`;\n\nexport default Col;","import React from 'react';\nimport styled from 'styled-components';\n\ntype RowProps = {\n  children: React.ReactChild;\n}\n//Row 컴포넌트\n\nconst Row = styled.div`\n  &::after {\n    content: \"\";\n    clear: both;\n    display: table;\n  }\n`;\n\nexport default Row;","import React from \"react\";\nimport Webcam from \"react-webcam\";\n\nconst WebCam = () =>\n  <Webcam\n    audio={true}\n    forceScreenshotSourceSize={true}\n    imageSmoothing={true}\n    mirrored={true}\n    screenshotFormat={'image/png'}\n    screenshotQuality={1}\n    minScreenshotHeight={720}\n    minScreenshotWidth={720}\n    onUserMedia={() => { console.log('hey')}}\n    onUserMediaError={(error) => { console.log('error', error)}}\n  />;\n\nexport default WebCam;","import React, { useState , useEffect } from 'react';\n\nconst useAudio = (url: string, auto: boolean = false) => {\n  const [audio] = useState(new Audio(url))\n  const [playing, setPlaying] = useState(auto)\n\n  const toggle = () => setPlaying(!playing)\n\n  useEffect(() => {\n    playing ? audio.play(): audio.pause()\n  }, [playing])\n\n  useEffect(() => {\n    audio.addEventListener('ended', () => setPlaying(false))\n    return () => {\n      audio.pause();\n      audio.removeEventListener('ended', () => setPlaying(false));\n    };\n  }, [])\n\n  return [playing, toggle] as const;\n}\n\n\ntype Url = {\n  url: string;\n  auto?: boolean;\n}\n\nconst Music = ({url, auto = false}: Url) => {\n  const [playing, toggle] = useAudio(url, auto);\n\n  return (\n    <div>\n      <button onClick={toggle}>{playing ? 'Pause':'Play'}</button>\n    </div>\n  )\n}\n\nexport default Music;","import React from 'react';\nimport styled, { css } from 'styled-components';\nimport { lighten, darken } from 'polished';\n\nconst colorStyles = css`\n  ${({ theme, color }: any) => {\n    const selected = theme.palette[color];\n    return css`\n      background-color: ${selected};\n      &:hover {\n        background: ${lighten(0.1, selected)};\n      }\n      &:active {\n      }\n    `;\n  }}\n`;\n\nconst StyledButton = styled.button`\n  /* 공통 스타일 */\n  display: inline-flex;\n  outline: none;\n  border: none;\n  border-radius: 4px;\n  color: white;\n  font-weight: bold;\n  cursor: pointer;\n  padding-left: 1rem;\n  padding-right: 1rem;\n\n  height: 2.25rem;\n  font-size: 1rem;\n\n  ${colorStyles}\n  /* 기타 */\n  & + & {\n    margin-left: 1rem;\n  }\n`;\n\ntype Button = {\n  children: any;\n  color: 'pink' | 'gray' | 'blue';\n  [x:string]: any;\n}\n\nfunction Button({ children, color, ...rest }: Button) {\n  return (\n    <StyledButton\n      color={color || 'blue'}\n      {...rest}\n    >\n      {children}\n    </StyledButton>\n  );\n}\n\nexport default Button;","import React from 'react';\nimport styled, { keyframes } from 'styled-components';\n\nconst StarwarsContainer = styled.div`\n  width: 100%;\n  height: 100%;\n  background: #000;\n  overflow: hidden;\n`;\n\nconst Section = styled.section`\n  display: flex;\n  justify-content: center;\n  position: relative;\n  height: 800px;\n  color: #feda4a;\n  font-family: 'Pathway Gothic One', sans-serif;\n  font-size: 500%;\n  font-weight: 600;\n  letter-spacing: 6px;\n  line-height: 150%;\n  perspective: 400px;\n  text-align: justify;\n`\nconst CrawlKeyFrames = keyframes`\n  0% {\n    top: 0;\n    transform: rotateX(20deg)  translateZ(0);\n  }\n  100% { \n    top: -6000px;\n    transform: rotateX(25deg) translateZ(-2500px);\n  }\n`\n\nconst Crawl = styled.div`\n  position: relative;\n  top: 9999px;\n  transform-origin: 50% 100%;\n  animation: ${CrawlKeyFrames} 60s linear;\n\n  & title {\n    font-size: 90%;\n    text-align: center;\n\n    h1 {\n      margin: 0 0 100px;\n      text-transform: uppercase;\n    }\n  }\n`\n\nconst Starwars = () => {\n\n  return (\n    <StarwarsContainer>\n      <Section>\n        <Crawl>\n          <div>\n            <p>Episode IV</p>\n            <h1>A New Hope</h1>\n          </div>\n\n          <p>It is a period of civil war. Rebel spaceships, striking from a hidden base, have won their first victory against the evil Galactic Empire.</p>\n          <p>During the battle, Rebel spies managed to steal secret plans to the Empire’s ultimate weapon, the DEATH STAR, an armored space station with enough power to destroy an entire planet.</p>\n          <p>Pursued by the Empire’s sinister agents, Princess Leia races home aboard her starship, custodian of the stolen plans that can save her people and restore freedom to the galaxy…</p>\n\n        </Crawl>\n\n      </Section>\n    </StarwarsContainer>\n  )\n}\n\nexport default Starwars;","import React from 'react';\nimport { WebCam } from '../components';\n\nconst Camera = () => {\n  return (\n    <div>\n      <h1>HEY</h1>Camera\n      <WebCam />\n    </div>\n  )\n}\n\nexport default Camera;\n","import React from \"react\";\nimport { Music } from '../components';\nconst happysong = require(\"../assets/happysong.mp3\");\n\nconst Home = () => {\n  return <div>\n    <Music url={happysong} auto={true}/>\n    This is Home page\n    </div>;\n};\nexport default Home;","import React from 'react';\nimport { Music, Starwars } from '../components';\nconst starwars = require(\"../assets/starwars.mp3\");\n\nconst Letter = () => {\n  return (\n    <div>\n      <Starwars />\n      <Music url={starwars} auto={true}/>\n      Letter\n    </div>\n  )\n}\n\nexport default Letter;\n","import React from 'react';\nimport styled from 'styled-components';\nimport title from '../assets/title1.png';\n\nconst Header = styled.div`\n  text-align: center;\n  color: ${(props) => props.theme.fontColor};\n`\n\nconst Image = styled.img`\n  width: 20%;\n  min-width: 200px;\n`\n\nconst HeaderContainer = () => (\n  <Header>\n    <Image src={title} />\n  </Header>\n)\n\nexport default HeaderContainer;","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport styled from 'styled-components';\nimport { Col, Row, Button } from '../components';\n\nconst MenuContainer = styled.div`\n  width: 100%;\n  font-size: 20px;\n  text-align: center;\n`;\nconst activeStyle = {\n  color: \"#09D3AC\",\n};\n\nconst defaultStyle = {\n  textDecoration: \"none\",\n  color: \"black\",\n};\n\nconst menuList = [\n  { path: '/', name: 'Home'},\n  { path: '/about', name: 'About'},\n  { path: '/letter', name: 'Letter'},\n  { path: '/camera', name: 'Camera'},\n]\n\nconst Menu = () => {\n  return (\n    <MenuContainer>\n      <Row>\n      { menuList.map(item => {\n        return (\n          <Col xs={6} sm={3} md={3} lg={3}>\n            <NavLink to={item.path} activeStyle={activeStyle} exact style={defaultStyle}>\n              <Button color={'pink'}>{item.name}</Button>\n            </NavLink>\n          </Col>\n        )\n      })}\n      </Row>\n    </MenuContainer>\n  );\n};\n\nexport default Menu;","// src/styles/theme.ts\nimport { DefaultTheme } from 'styled-components';\n\nconst basicTheme: DefaultTheme = {\n  palette: {\n    blue: '#228be6',\n    gray: '#495057',\n    pink: '#f06595'\n  },\n  basicWidth: '320px',\n  backgroundColor: '#fdfce2',\n  color: {\n    main: '#1c1f25',\n    sub: '#fff',\n  },\n  fontColor: '#c594c5',\n};\n\nexport { basicTheme };","import React from \"react\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport {\n  About,\n  Camera,\n  Home,\n  Letter,\n} from './routes';\nimport { Col, Row } from './components';\nimport { Header, Menu } from './containers';\nimport styled, { ThemeProvider } from 'styled-components';\nimport { basicTheme } from './styles/theme';\n\nconst AppContainer = styled.div`\n  &,\n  & * {\n    box-sizing: border-box;\n  }\n  & {\n    background: ${(props) => props.theme.backgroundColor};\n  }\n`;\n\nconst App = () => {\n  return (\n    <ThemeProvider\n      theme={basicTheme}\n    >\n      <BrowserRouter>\n        <AppContainer>\n        <Header />\n          <Row>\n            <Col xs={6} sm={6} md={12} lg={12}>\n              <Menu />\n              <Route path='/' exact={true} component={Home} />\n              <Route path='/about' component={About} />\n              <Route path='/letter' exact={true} component={Letter} />\n              <Route path='/camera' component={Camera} />\n            </Col>\n          </Row>\n        </AppContainer>\n      </BrowserRouter>\n    </ThemeProvider>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}