{"version":3,"sources":["routes/About.tsx","components/Col.tsx","components/Row.tsx","routes/Home.tsx","routes/Letter.tsx","containers/Header.tsx","containers/Menu.tsx","styles/theme.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["About","calcWidthPercent","span","Col","styled","div","xs","sm","md","lg","Row","Home","Letter","Header","props","theme","fontColor","HeaderContainer","activeStyle","color","defaultStyle","textDecoration","Menu","className","to","exact","style","basicTheme","basicWidth","backgroundColor","main","sub","AppContainer","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gMAKeA,EAHD,WACZ,OAAO,oD,gVCCT,IAAMC,EAAmB,SAACC,GACxB,GAAKA,EAGL,OADeA,EAAO,GAAM,KA+BfC,EAhBHC,IAAOC,IAAV,KAEE,gBAAGC,EAAH,EAAGA,GAAH,OAAuBA,EAAE,UAAML,EAAiBK,GAAvB,cAbT,KAiBd,gBAAGC,EAAH,EAAGA,GAAH,OAAsBA,GAAE,UAAON,EAAiBM,GAAxB,OAhBV,KAmBd,gBAAGC,EAAH,EAAGA,GAAH,OAAsBA,GAAE,UAAOP,EAAiBO,GAAxB,OAlBd,MAqBV,gBAAGC,EAAH,EAAGA,GAAH,OAAsBA,GAAE,UAAOR,EAAiBQ,GAAxB,Q,mJC1BrC,IAQeC,EARHN,IAAOC,IAAV,KCHMM,G,MAHF,WACX,OAAO,oDCOMC,EARA,WACb,OACE,wC,sFCDJ,IAAMC,EAAST,IAAOC,IAAV,KACD,SAACS,GAAD,OAAWA,EAAMC,MAAMC,aAWnBC,EARS,kBACtB,kBAACJ,EAAD,KACE,yECNEK,EAAc,CAClBC,MAAO,WAGHC,EAAe,CACnBC,eAAgB,OAChBF,MAAO,SAsBMG,EAnBF,WACX,OACE,yBAAKC,UAAU,QACb,kBAAC,IAAD,CAASC,GAAG,IAAIN,YAAaA,EAAaO,OAAK,EAACC,MAAON,GAAvD,QAGA,kBAAC,IAAD,CAASI,GAAG,SAASN,YAAaA,EAAaQ,MAAON,GAAtD,SAGA,kBAAC,IAAD,CAASI,GAAG,UAAUN,YAAaA,EAAaO,OAAK,EAACC,MAAON,GAA7D,UAGA,kBAAC,IAAD,CAASI,GAAG,UAAUN,YAAaA,EAAaO,OAAK,EAACC,MAAON,GAA7D,YCrBAO,EAA2B,CAC/BC,WAAY,QACZC,gBAAiB,UACjBV,MAAO,CACLW,KAAM,UACNC,IAAK,QAEPf,UAAW,W,qJCGb,IAAMgB,EAAe5B,IAAOC,IAAV,KAKM,SAACS,GAAD,OAAWA,EAAMC,MAAMc,mBA0BhCI,EAtBH,WACV,OACE,kBAAC,IAAD,CACElB,MAAOY,GAEP,kBAAC,IAAD,KACE,kBAACK,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAK1B,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAC7B,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOyB,KAAK,IAAIT,OAAO,EAAMU,UAAWxB,IACxC,kBAAC,IAAD,CAAOuB,KAAK,SAASC,UAAWnC,IAChC,kBAAC,IAAD,CAAOkC,KAAK,UAAUT,OAAO,EAAMU,UAAWvB,UCvBxCwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDkIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8eb54bad.chunk.js","sourcesContent":["import React from \"react\";\n\nconst About = () => {\n  return <div>This is About page</div>;\n};\nexport default About;","import React from 'react';\nimport styled from 'styled-components';\n\n//Column 컴포넌트\nconst calcWidthPercent = (span: number) => {\n  if (!span) return;\n\n  const width = (span / 12) * 100;\n  return width;\n};\n\nconst BREAK_POINT_MOBILE = 768;\nconst BREAK_POINT_TABLET = 992;\nconst BREAK_POINT_PC = 1200;\n\ntype ColProps = {\n  xs: number;\n  sm: number;\n  md: number;\n  lg: number;\n}\n\nconst Col = styled.div`\n  float: left;\n  width: ${({ xs }: ColProps) => (xs ? `${calcWidthPercent(xs)}%` : `100%`)};\n  padding: 1rem;\n\n  @media only screen and (min-width: ${BREAK_POINT_MOBILE}px) {\n    width: ${({ sm }: ColProps) => sm && `${calcWidthPercent(sm)}%`};\n  }\n  @media only screen and (min-width: ${BREAK_POINT_TABLET}px) {\n    width: ${({ md }: ColProps) => md && `${calcWidthPercent(md)}%`};\n  }\n  @media only screen and (min-width: ${BREAK_POINT_PC}px) {\n    width: ${({ lg }: ColProps) => lg && `${calcWidthPercent(lg)}%`};\n  }\n`;\n\nexport default Col;","import React from 'react';\nimport styled from 'styled-components';\n\ntype RowProps = {\n  children: React.ReactChild;\n}\n//Row 컴포넌트\n\nconst Row = styled.div`\n  &::after {\n    content: \"\";\n    clear: both;\n    display: table;\n  }\n`;\n\nexport default Row;","import React from \"react\";\n\nconst Home = () => {\n  return <div>This is Home page</div>;\n};\nexport default Home;","import React from 'react';\n\nconst Letter = () => {\n  return (\n    <div>\n      Letter\n    </div>\n  )\n}\n\nexport default Letter;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst Header = styled.div`\n  color: ${(props) => props.theme.fontColor};\n`\n\nconst HeaderContainer = () => (\n  <Header>\n    <h1>\n    🎂Happy Birth Day🎂\n    </h1>\n  </Header>\n)\n\nexport default HeaderContainer;","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nconst activeStyle = {\n  color: \"#09D3AC\",\n};\n\nconst defaultStyle = {\n  textDecoration: \"none\",\n  color: \"black\",\n};\n\nconst Menu = () => {\n  return (\n    <div className=\"Menu\">\n      <NavLink to=\"/\" activeStyle={activeStyle} exact style={defaultStyle}>\n        Home\n      </NavLink>\n      <NavLink to=\"/about\" activeStyle={activeStyle} style={defaultStyle}>\n        About\n      </NavLink>\n      <NavLink to=\"/letter\" activeStyle={activeStyle} exact style={defaultStyle}>\n        Letter\n      </NavLink>\n      <NavLink to=\"/camera\" activeStyle={activeStyle} exact style={defaultStyle}>\n        Camera\n      </NavLink>\n    </div>\n  );\n};\n\nexport default Menu;","// src/styles/theme.ts\nimport { DefaultTheme } from 'styled-components';\n\nconst basicTheme: DefaultTheme = {\n  basicWidth: '320px',\n  backgroundColor: '#fdfce2',\n  color: {\n    main: '#1c1f25',\n    sub: '#fff',\n  },\n  fontColor: '#c594c5',\n};\n\nexport { basicTheme };","import React from \"react\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport {\n  About,\n  Camera,\n  Home,\n  Letter,\n} from './routes';\nimport { Col, Row } from './components';\nimport { Header, Menu } from './containers';\nimport styled, { ThemeProvider } from 'styled-components';\nimport { basicTheme } from './styles/theme'\n\nconst AppContainer = styled.div`\n  &,\n  & * {\n    box-sizing: border-box;\n\n    background-color: ${(props) => props.theme.backgroundColor}\n  }\n`;\n\nconst App = () => {\n  return (\n    <ThemeProvider\n      theme={basicTheme}\n    >\n      <BrowserRouter>\n        <AppContainer>\n          <Header />\n          <Row>\n            <Col xs={12} sm={9} md={6} lg={6}>\n              <Menu />\n              <Route path='/' exact={true} component={Home} />\n              <Route path='/about' component={About} />\n              <Route path='/letter' exact={true} component={Letter} />\n            </Col>\n          </Row>\n        </AppContainer>\n      </BrowserRouter>\n    </ThemeProvider>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}